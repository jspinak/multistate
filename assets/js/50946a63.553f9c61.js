"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6553],{5163:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"guides/quick-start","title":"Quick Start","description":"Get up and running with MultiState in 5 minutes!","source":"@site/docs/guides/quick-start.md","sourceDirName":"guides","slug":"/guides/quick-start","permalink":"/multistate/docs/guides/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/multistate/tree/main/docs-site/docs/guides/quick-start.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"quick-start","title":"Quick Start","sidebar_label":"Quick Start","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Formal Model","permalink":"/multistate/docs/theory/formal-model"}}');var r=n(4848),i=n(8453);const s={id:"quick-start",title:"Quick Start",sidebar_label:"Quick Start",sidebar_position:1},o="Quick Start Guide",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Your First MultiState Application",id:"your-first-multistate-application",level:2},{value:"Step 1: Import and Initialize",id:"step-1-import-and-initialize",level:3},{value:"Step 2: Define Your States",id:"step-2-define-your-states",level:3},{value:"Step 3: Define Transitions",id:"step-3-define-transitions",level:3},{value:"Step 4: Multi-Target Pathfinding",id:"step-4-multi-target-pathfinding",level:3},{value:"Step 5: Execute Transitions with Rollback",id:"step-5-execute-transitions-with-rollback",level:3},{value:"Step 6: Handle Occlusions",id:"step-6-handle-occlusions",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Key Concepts to Remember",id:"key-concepts-to-remember",level:2},{value:"1. Multi-State Activation",id:"1-multi-state-activation",level:3},{value:"2. Multi-Target Pathfinding",id:"2-multi-target-pathfinding",level:3},{value:"3. Phased Execution",id:"3-phased-execution",level:3},{value:"4. State Groups",id:"4-state-groups",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Getting Help",id:"getting-help",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,r.jsx)(t.p,{children:"Get up and running with MultiState in 5 minutes!"}),"\n",(0,r.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"pip install multistate\n"})}),"\n",(0,r.jsx)(t.p,{children:"Or install from source:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/jspinak/multistate.git\r\ncd multistate\r\npip install -e .\n"})}),"\n",(0,r.jsx)(t.h2,{id:"your-first-multistate-application",children:"Your First MultiState Application"}),"\n",(0,r.jsx)(t.p,{children:"Let's build a simple GUI application with multiple panels that can be opened simultaneously."}),"\n",(0,r.jsx)(t.h3,{id:"step-1-import-and-initialize",children:"Step 1: Import and Initialize"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from multistate import StateManager, SearchStrategy\r\n\r\n# Create a state manager\r\nmanager = StateManager(\r\n    search_strategy=SearchStrategy.DIJKSTRA,  # Use optimal pathfinding\r\n    log_transitions=True  # Enable transition logging\r\n)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"step-2-define-your-states",children:"Step 2: Define Your States"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Add application states\r\nmain_window = manager.add_state('main', 'Main Window')\r\ntoolbar = manager.add_state('toolbar', 'Toolbar')\r\nsidebar = manager.add_state('sidebar', 'Sidebar')\r\nsearch_panel = manager.add_state('search', 'Search Panel')\r\nproperties_panel = manager.add_state('properties', 'Properties Panel')\r\n\r\n# Add a modal dialog (blocks other states)\r\nsettings_modal = manager.add_state(\r\n    'settings',\r\n    'Settings Dialog',\r\n    blocking=True  # This state occludes others\r\n)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"step-3-define-transitions",children:"Step 3: Define Transitions"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Transition that opens multiple UI components at once\r\nmanager.add_transition(\r\n    id='open_workspace',\r\n    name='Open Workspace',\r\n    from_states=['main'],\r\n    activate_states=['toolbar', 'sidebar'],  # Activate BOTH\r\n    path_cost=1.0\r\n)\r\n\r\n# Transition to show panels\r\nmanager.add_transition(\r\n    id='show_panels',\r\n    name='Show All Panels',\r\n    from_states=['toolbar', 'sidebar'],\r\n    activate_states=['search', 'properties'],  # Activate multiple panels\r\n    path_cost=1.5\r\n)\r\n\r\n# Transition to open modal\r\nmanager.add_transition(\r\n    id='open_settings',\r\n    name='Open Settings',\r\n    from_states=['main'],\r\n    activate_states=['settings'],\r\n    path_cost=0.5\r\n)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"step-4-multi-target-pathfinding",children:"Step 4: Multi-Target Pathfinding"}),"\n",(0,r.jsx)(t.p,{children:"Find the optimal path to reach multiple states:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Start from main window\r\nmanager.activate_states({'main'})\r\n\r\n# Find path to reach BOTH search and properties panels\r\npath = manager.find_path_to(['search', 'properties'])\r\n\r\nif path:\r\n    print(f\"Found path with {len(path.transitions)} steps\")\r\n    print(f\"Total cost: {path.total_cost}\")\r\n\r\n    # Show the path\r\n    for i, transition_id in enumerate(path.transitions_sequence):\r\n        transition = manager.get_transition(transition_id)\r\n        print(f\"{i+1}. {transition.name}\")\n"})}),"\n",(0,r.jsx)(t.p,{children:"Output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Found path with 2 steps\r\nTotal cost: 2.5\r\n1. Open Workspace\r\n2. Show All Panels\n"})}),"\n",(0,r.jsx)(t.h3,{id:"step-5-execute-transitions-with-rollback",children:"Step 5: Execute Transitions with Rollback"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Execute with automatic rollback on failure\r\nsuccess = manager.execute_transition(\'open_workspace\')\r\n\r\nif success:\r\n    print("Workspace opened successfully!")\r\n    print(f"Active states: {manager.get_active_states()}")\r\nelse:\r\n    print("Failed to open workspace - state rolled back")\n'})}),"\n",(0,r.jsx)(t.h3,{id:"step-6-handle-occlusions",children:"Step 6: Handle Occlusions"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Open modal (will occlude other states)\r\nmanager.activate_states({'settings'})\r\n\r\n# Check what's occluded\r\noccluded = manager.get_occluded_states()\r\nprint(f\"Occluded states: {occluded}\")\r\n\r\n# Close modal - will generate reveal transition\r\nmanager.deactivate_state('settings')\r\n# Previously hidden states are automatically restored!\n"})}),"\n",(0,r.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(t.p,{children:"Here's everything together in a working example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from multistate import StateManager, SearchStrategy\r\n\r\ndef demo_gui_automation():\r\n    \"\"\"Demonstrate MultiState for GUI automation.\"\"\"\r\n\r\n    # Initialize\r\n    manager = StateManager(SearchStrategy.DIJKSTRA)\r\n\r\n    # Define states\r\n    states = {\r\n        'main': 'Main Window',\r\n        'toolbar': 'Toolbar',\r\n        'sidebar': 'Sidebar',\r\n        'content': 'Content Area',\r\n        'search': 'Search Panel',\r\n        'properties': 'Properties Panel',\r\n        'debug': 'Debug Console'\r\n    }\r\n\r\n    for state_id, name in states.items():\r\n        manager.add_state(state_id, name)\r\n\r\n    # Create state group for UI components\r\n    manager.add_group('workspace', ['toolbar', 'sidebar', 'content'])\r\n\r\n    # Define transitions\r\n    transitions = [\r\n        {\r\n            'id': 'startup',\r\n            'from': [],\r\n            'activate': ['main'],\r\n            'cost': 0.1\r\n        },\r\n        {\r\n            'id': 'open_workspace',\r\n            'from': ['main'],\r\n            'activate': ['toolbar', 'sidebar', 'content'],  # Multi-state!\r\n            'cost': 1.0\r\n        },\r\n        {\r\n            'id': 'show_all_panels',\r\n            'from': ['toolbar'],\r\n            'activate': ['search', 'properties', 'debug'],  # Three at once!\r\n            'cost': 2.0\r\n        }\r\n    ]\r\n\r\n    for trans in transitions:\r\n        manager.add_transition(\r\n            trans['id'],\r\n            trans['id'].replace('_', ' ').title(),\r\n            trans['from'],\r\n            trans['activate'],\r\n            [],  # No states to exit\r\n            trans['cost']\r\n        )\r\n\r\n    # Demonstrate multi-target pathfinding\r\n    print(\"\ud83c\udfaf Multi-Target Pathfinding Demo\")\r\n    print(\"-\" * 40)\r\n\r\n    # Start fresh\r\n    manager.clear_active_states()\r\n    manager.activate_states({'main'})\r\n\r\n    # Find path to ALL three panels\r\n    targets = ['search', 'properties', 'debug']\r\n    print(f\"Finding path to reach ALL: {targets}\")\r\n\r\n    path = manager.find_path_to(targets)\r\n    if path:\r\n        print(f\"\u2705 Path found: {len(path.transitions)} steps, cost: {path.total_cost:.1f}\")\r\n\r\n        # Execute the path\r\n        for transition_id in path.transitions_sequence:\r\n            success = manager.execute_transition(transition_id)\r\n            trans = manager.get_transition(transition_id)\r\n            status = \"\u2713\" if success else \"\u2717\"\r\n            print(f\"  {status} {trans.name}\")\r\n\r\n        # Verify all targets reached\r\n        active = manager.get_active_states()\r\n        reached = all(t in active for t in targets)\r\n        print(f\"\\nAll targets reached: {'\u2705 Yes' if reached else '\u274c No'}\")\r\n        print(f\"Active states: {active}\")\r\n    else:\r\n        print(\"\u274c No path found\")\r\n\r\n    # Demonstrate state groups\r\n    print(\"\\n\ud83d\udc65 State Groups Demo\")\r\n    print(\"-\" * 40)\r\n\r\n    # Activate entire workspace at once\r\n    manager.activate_group('workspace')\r\n    print(f\"Activated 'workspace' group\")\r\n    print(f\"Active states: {manager.get_active_states()}\")\r\n\r\n    # Demonstrate complexity analysis\r\n    print(\"\\n\ud83d\udcca System Complexity\")\r\n    print(\"-\" * 40)\r\n    complexity = manager.analyze_complexity()\r\n    print(f\"Total states: {complexity['num_states']}\")\r\n    print(f\"Total transitions: {complexity['num_transitions']}\")\r\n    print(f\"Reachable states: {complexity['reachable_states']}\")\r\n    print(f\"Active states: {complexity['active_states']}\")\r\n\r\nif __name__ == \"__main__\":\r\n    demo_gui_automation()\n"})}),"\n",(0,r.jsx)(t.h2,{id:"key-concepts-to-remember",children:"Key Concepts to Remember"}),"\n",(0,r.jsx)(t.h3,{id:"1-multi-state-activation",children:"1. Multi-State Activation"}),"\n",(0,r.jsx)(t.p,{children:"Transitions can activate multiple states atomically:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"activate_states=['toolbar', 'sidebar', 'content']  # All activated together\n"})}),"\n",(0,r.jsx)(t.h3,{id:"2-multi-target-pathfinding",children:"2. Multi-Target Pathfinding"}),"\n",(0,r.jsx)(t.p,{children:"Find paths that reach ALL specified targets:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"path = manager.find_path_to(['target1', 'target2', 'target3'])\r\n# Returns optimal path reaching ALL three\n"})}),"\n",(0,r.jsx)(t.h3,{id:"3-phased-execution",children:"3. Phased Execution"}),"\n",(0,r.jsx)(t.p,{children:"Transitions execute in phases with automatic rollback:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"VALIDATE"}),": Check preconditions"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"ACTIVATE"}),": Add states to memory (can't fail)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"INCOMING"}),": Execute entry actions"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"EXIT"}),": Remove old states (only if incoming succeeded)"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"4-state-groups",children:"4. State Groups"}),"\n",(0,r.jsx)(t.p,{children:"Group related states for atomic operations:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"manager.add_group('panels', ['search', 'properties', 'debug'])\r\nmanager.activate_group('panels')  # Activate all at once\n"})}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\ud83d\udcd6 Read the ",(0,r.jsx)(t.a,{href:"/docs/theory/formal-model",children:"Formal Model"})," to understand the theory"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\ud83d\udcac ",(0,r.jsx)(t.a,{href:"https://github.com/jspinak/multistate/discussions",children:"GitHub Discussions"})," for questions"]}),"\n",(0,r.jsxs)(t.li,{children:["\ud83d\udc1b ",(0,r.jsx)(t.a,{href:"https://github.com/jspinak/multistate/issues",children:"Issue Tracker"})," for bugs"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Welcome to MultiState - where multiple states work in harmony! \ud83c\udf89"})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);